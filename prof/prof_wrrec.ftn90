function prof_wrrec(klun)
  !
  !/* LibProf - Communication Library for data assimilation coupling 
  ! * Copyright (C) 2001-2002  Data Assimilation and Satellite Meteorology Division
  ! *                          Meteorological Service of Canada
  ! *
  ! * This library is free software; you can redistribute it and/or
  ! * modify it under the terms of the GNU Lesser General Public
  ! * License as published by the Free Software Foundation,
  ! * version 2.1 of the License.
  ! *
  ! * This library is distributed in the hope that it will be useful,
  ! * but WITHOUT ANY WARRANTY; without even the implied warranty of
  ! * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  ! * Lesser General Public License for more details.
  ! *
  ! * You should have received a copy of the GNU Lesser General Public
  ! * License along with this library; if not, write to the
  ! * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
  ! * Boston, MA 02111-1307, USA.
  ! */
  !
  ! Author: Simon Pellerin, ARMA/MSC, 2001
  !
  ! Revision:
  !

  use prof_shared, only : jprels
  use prof_types, only : prof
  use prof_priv_int, only : prof_find
  implicit none
  integer :: prof_wrrec
  integer :: klun

  ! Locals
  type (prof), pointer :: tlprof
  integer :: j
  prof_wrrec = -1

  tlprof => prof_find(klun)
  if(.not. associated(tlprof)) then
     prof_wrrec = -999 ! pointer is not associated
     return
  endif

  if(.not.tlprof%writ) then
     if(tlprof%com == 'FILE') then
        write(unit=tlprof%lun,iostat=prof_wrrec) tlprof%bitprm,jprels
     elseif(tlprof%com == 'PALM') then
        prof_wrrec = -999
        return
     endif
     if(prof_wrrec /= 0) return
  endif

  if(tlprof%com == 'FILE') then
     write(unit=tlprof%lun,iostat=prof_wrrec) tlprof%hdr
  elseif(tlprof%com == 'PALM') then
     prof_wrrec = -999
     return
  endif
  if(prof_wrrec /= 0) return

  if(associated(tlprof%ndat)) then
     write(unit=tlprof%lun,iostat=prof_wrrec) tlprof%ndat
     if(prof_wrrec /= 0) return
     deallocate(tlprof%ndat,STAT=prof_wrrec)
     if(prof_wrrec /= 0) return
  endif

  if(associated(tlprof%rdat)) then
     write(unit=tlprof%lun,iostat=prof_wrrec) tlprof%rdat
     if(prof_wrrec /= 0) return
     deallocate(tlprof%rdat,STAT=prof_wrrec)
     if(prof_wrrec /= 0) return
  endif

  if(associated(tlprof%ddat)) then
     write(unit=tlprof%lun,iostat=prof_wrrec) tlprof%ddat
     if(prof_wrrec /= 0) return
     deallocate(tlprof%ddat,STAT=prof_wrrec)
     if(prof_wrrec /= 0) return
  endif

  do j = 1,size(tlprof%hdr)
     tlprof%hdr(j) = 0
  enddo
  
  tlprof%writ = .true.
  tlprof%ipush = .false.
  tlprof%rpush = .false.
  tlprof%dpush = .false.

end function prof_wrrec
